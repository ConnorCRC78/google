<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mapbox Spatial Analysis</title>
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.0/mapbox-gl.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/6.5.0/turf.min.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.14.0/mapbox-gl.css" rel="stylesheet">
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 0; bottom: 0; width: 100%; }
        #controls {
            position: absolute;
            top: 10px;
            left: 10px;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            z-index: 10;
        }
        button { margin: 5px; padding: 5px 10px; cursor: pointer; }
    </style>
</head>
<body>

<div id="controls">
    <button id="measure-distance">Measure Distance</button>
    <button id="nearest-neighbor">Find Nearest</button>
    <button id="create-buffer">Create Buffer</button>
</div>

<div id="map"></div>

<script>
    // Initialize Mapbox
    mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [-122.335167, 47.608013], // Seattle, WA
        zoom: 12
    });

    let points = [];

    // Add points on click
    map.on('click', (e) => {
        const coords = [e.lngLat.lng, e.lngLat.lat];
        points.push(coords);

        new mapboxgl.Marker().setLngLat(coords).addTo(map);

        console.log("Point added:", coords);
    });

    // Measure Distance Between First Two Points
    document.getElementById('measure-distance').addEventListener('click', () => {
        if (points.length < 2) {
            alert("Click on the map to add at least two points.");
            return;
        }
        const distance = turf.distance(turf.point(points[0]), turf.point(points[1]), { units: 'kilometers' });
        alert(`Distance: ${distance.toFixed(2)} km`);
    });

    // Find Nearest Neighbor
    document.getElementById('nearest-neighbor').addEventListener('click', () => {
        if (points.length < 2) {
            alert("Click on the map to add at least two points.");
            return;
        }

        const from = turf.point(points[0]);
        const toPoints = turf.featureCollection(points.slice(1).map(p => turf.point(p)));
        const nearest = turf.nearestPoint(from, toPoints);

        new mapboxgl.Marker({ color: 'red' })
            .setLngLat(nearest.geometry.coordinates)
            .addTo(map);

        alert(`Nearest point is at ${nearest.geometry.coordinates}`);
    });

    // Create Buffer Around First Point
    document.getElementById('create-buffer').addEventListener('click', () => {
        if (points.length < 1) {
            alert("Click on the map to add at least one point.");
            return;
        }

        const buffer = turf.buffer(turf.point(points[0]), 1, { units: 'kilometers' });

        if (map.getSource('buffer')) {
            map.getSource('buffer').setData(buffer);
        } else {
            map.addSource('buffer', { type: 'geojson', data: buffer });
            map.addLayer({
                id: 'buffer-layer',
                type: 'fill',
                source: 'buffer',
                paint: {
                    'fill-color': '#088',
                    'fill-opacity': 0.5
                }
            });
        }
    });
</script>

</body>
</html>
